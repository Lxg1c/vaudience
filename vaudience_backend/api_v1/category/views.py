from fastapi import APIRouter
from fastapi.params import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from api_v1.category import crud
from api_v1.category.schemas import (
    CategorySchema,
    CategoryCreate,
    CategoryUpdate,
)
from core.models import Category
from core.models.db_helper import db_helper
from core.services.shared.dependencies import get_object_by_id_or_404

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
router = APIRouter(prefix="/category", tags=["Category"])


# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.get("/", response_model=list[CategorySchema])
async def get_categories(
    session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    return await crud.get_categories(session=session)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@router.post("/", response_model=CategorySchema)
async def create_category(
    category_in: CategoryCreate,
    session: AsyncSession = Depends(db_helper.scoped_session_dependency),
) -> Category:
    return await crud.create_category(session=session, category=category_in)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
@router.get("/{category_id}", response_model=CategorySchema)
async def get_category_by_id(
    category_id: int,
    session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    return await crud.get_category_by_id(session=session, category_id=category_id)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî PUT)
@router.put("/{category_id}", response_model=CategorySchema)
async def update_category(
    category_update: CategoryUpdate,  # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    category_in: CategorySchema = Depends(
        get_category_by_id
    ),  # –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ –ë–î
    session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    return await crud.update_product(  # üí° –õ—É—á—à–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ update_category
        category_in=category_in,
        session=session,
        category_update=category_update,
        partial=False,  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è (PUT)
    )


# –≠–Ω–¥–ø–æ–∏–Ω—Ç: –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
@router.delete("/{category_id}/")
async def delete_category(
    category: Category = Depends(
        get_object_by_id_or_404(
            model=Category,
            id_name="category_id",
            get_func=crud.get_category_by_id,
        )
    ),
    session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    try:
        await crud.delete_category(category=category, session=session)
        return {
            "message": "Category deleted",
        }
    except Exception as err:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –º–µ—à–∞—é—Ç —É–¥–∞–ª–µ–Ω–∏—é)
        return {
            "message": "Error when deleting category",
            "error": str(err),
        }
